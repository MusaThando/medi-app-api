using MedicalAPI.DAL;
using MedicalAPI.Model;
using Microsoft.AspNetCore.Mvc;
using System.Net.Mime;
namespace MedicalAPI.Controllers
{
    [ApiController]
    [Consumes(MediaTypeNames.Application.Json)]
    [Produces(MediaTypeNames.Application.Json)]
    public class MediAppController : ControllerBase
    {
        readonly MediAppDAL dal = new();


        #region Post Functions
        [HttpPost]
        [Route("register-user")]
        public async Task<IActionResult> Register([FromBody] CRegisterViewModel cRegisterViewModel) 
        {
            int statusCode = 0;
            if (cRegisterViewModel != null)
            {
                Guid personGuid = await dal.PostRegistration(cRegisterViewModel);
                if (personGuid != Guid.Empty)
                {
                    statusCode += 100;
                    CMedicalAid cMedicalAid = new CMedicalAid
                    {
                        MedicalAidNumberfld = cRegisterViewModel.MedicalAidNumberfld,
                        MedicalAidPlanfld = cRegisterViewModel.MedicalAidPlanfld,
                        MedicalAidContactfld = cRegisterViewModel.MedicalAidContactfld,
                        PersonGUIDfld = personGuid
                    };
                    var res = await dal.PostMedicalAidInformation(cMedicalAid);

                    if (res == 1)
                    {
                        string encryptedPassword = Helper.Helper.EncryptWithMD5(cRegisterViewModel.Passwordfld);

                        CCredentials cCredentials = new CCredentials
                        {
                            Passwordfld = encryptedPassword,
                            ConfirmPasswordfld = encryptedPassword,
                            Usernamefld = cRegisterViewModel.Usernamefld,
                            PersonGUIDfld = personGuid
                        };
                        statusCode += 100;
                        await dal.PostUserPassword(cCredentials, encryptedPassword);
                    }

                    return Ok(statusCode);
                }
                else
                {
                    return BadRequest();
                }
            }
            else
            {
                return BadRequest();
            }
        }
        [HttpPost]
        [Route("create-doctor")]
        public async Task<IActionResult> CreateDoctor([FromBody] CRegisterViewModel cRegisterViewModel)
        {
            cRegisterViewModel.PrimaryDoctorGUIDfld = null;
            CPractice cPractice = new CPractice
            {
                PracticeNamefld = cRegisterViewModel.PracticeNamefld,
                PracticeRegistration = cRegisterViewModel.PracticeRegistration,
                Addressfld = cRegisterViewModel.PracticeAddressfld
            };
            
            Guid practiceGuid = await dal.PostPractice(cPractice);

            if (practiceGuid != Guid.Empty) 
            {
                Guid personGuid = await dal.PostRegistration(cRegisterViewModel);

                if (personGuid != Guid.Empty)
                {
                    string autoGeneratedPassword = cRegisterViewModel.IDNumberfld.Substring(4) + cRegisterViewModel.FirstNamefld;

                    string encryptedPassword = Helper.Helper.EncryptWithMD5(autoGeneratedPassword);

                    CCredentials cCredentials = new CCredentials
                    {
                        Passwordfld = encryptedPassword,
                        ConfirmPasswordfld = encryptedPassword,
                        Usernamefld = cRegisterViewModel.IDNumberfld,
                        PersonGUIDfld = personGuid,
                    };

                    await dal.PostUserPassword(cCredentials, encryptedPassword);

                    return Ok(1);
                }
                else
                {
                    return BadRequest();
                }
            }
            else 
            {
                return BadRequest();
            }
        }


        [HttpPost]
        [Route("create-user")]
        public async Task<IActionResult> CreateUser([FromBody] CRegisterViewModel cRegisterViewModel)
        {
            int statusCode = 0;
            if (cRegisterViewModel != null)
            {
                Guid personGuid = await dal.PostRegistration(cRegisterViewModel);
                if (personGuid != Guid.Empty)
                {
                    statusCode += 100;
                    CMedicalAid cMedicalAid = new CMedicalAid
                    {
                        MedicalAidNumberfld = cRegisterViewModel.MedicalAidNumberfld,
                        MedicalAidPlanfld = cRegisterViewModel.MedicalAidPlanfld,
                        MedicalAidContactfld = cRegisterViewModel.MedicalAidContactfld,
                        PersonGUIDfld = personGuid
                    };
                    var res = await dal.PostMedicalAidInformation(cMedicalAid);

                    if (res == 1)
                    {
                         
                            string autoGeneratedPassword =  cRegisterViewModel.IDNumberfld.Substring(4).ToString() + cRegisterViewModel.FirstNamefld;

                        string encryptedPassword = Helper.Helper.EncryptWithMD5(autoGeneratedPassword);

                        CCredentials cCredentials = new CCredentials
                        {
                            Passwordfld = encryptedPassword,
                            ConfirmPasswordfld = encryptedPassword,
                            Usernamefld = cRegisterViewModel.IDNumberfld,
                            PersonGUIDfld = personGuid
                        };
                        statusCode += 100;
                        await dal.PostUserPassword(cCredentials, encryptedPassword);
                    }

                    return Ok(statusCode);
                }
                else
                {
                    return BadRequest();
                }
            }
            else
            {
                return BadRequest();
            }

        }

        [HttpPost]
        [Route("create-transaction")]

        public async Task<IActionResult> CreateTransaction([FromBody] CDisease cDisease)
        {
            int statusCode;

            if (cDisease != null)
            {
                statusCode = await dal.PostTransaction(cDisease);
                if (statusCode == 1)
                {
                    return Ok(statusCode);
                }
                else
                { return BadRequest(); }
            }
            else 
            { return BadRequest(); }

        }

        [HttpPost]
        [Route("create-medicalaid-information")]
        public async Task<IActionResult> CreateMedicalAidInformation(CMedicalAid cMedicalAid)
        {
            var res = await dal.PostMedicalAidInformation(cMedicalAid);
            if(res == 1)
                return Ok(res);
            else
                return BadRequest(res);                                         
        }

        [HttpPost]
        [Route("create-password")]
        public async Task<IActionResult> CreatePassword(CCredentials cCredentials)
        {
            string encryptedPassword = Helper.Helper.EncryptWithMD5(cCredentials.Passwordfld);
            var res = await dal.PostUserPassword(cCredentials,encryptedPassword);
            if (res == 1)
                return Ok(res);
            else
                return BadRequest(res);
        }

        [Route("download-document")]
        [HttpGet]
        public async Task<IActionResult> DownloadDocument(Guid documentRepository)
        {
            var res = await dal.GetDocumentByID(documentRepository);
            if(res != null)
                return Ok(res);
            else 
                return NotFound();
        }

        [HttpPost]
        [Route("create-document")]
        
        public async Task<IActionResult> CreateDocument(CDocumentRepository cDocumentRepository)
        {
            string fileType;
            if (cDocumentRepository.File != null)
            {
                fileType = Helper.Helper.GetFileType(cDocumentRepository.File);
                using (MemoryStream ms = new MemoryStream())
                {
                    cDocumentRepository.File.OpenReadStream().CopyTo(ms);
                    cDocumentRepository.FileContentfld = ms.ToArray();
                }

                cDocumentRepository.FileTypefld = fileType;
                cDocumentRepository.FileNamefld = cDocumentRepository.File.FileName;
                var res = await dal.PostDocument(cDocumentRepository);
                if (res == 1)
                    return Ok(1);
                else
                    return BadRequest();
            }
            else 
            {
                return BadRequest();
            }          
        }

        [HttpPost]
        [Route("update-profile")]
        public async Task<IActionResult> UpdateProfile(CRegisterViewModel cRegisterViewModel) 
        {
            if (cRegisterViewModel.Passwordfld != cRegisterViewModel.PasswordCheck)
            {
                string encryptedPassword = Helper.Helper.EncryptWithMD5(cRegisterViewModel.Passwordfld);
                cRegisterViewModel.Passwordfld = encryptedPassword;
            }

            int res = await dal.PutProfileDetails(cRegisterViewModel);
            if(res >= 1)
                return Ok(res);
            else
                return BadRequest(res);
        }
        #endregion



        #region Get Functions
        [Route("get-disease-by-description")]
        [HttpGet]
        public async Task<IActionResult> GetDiseaseByDescription(string description)
        {
            var res = await dal.GetDiseaseByDescription(description);
            if (res != null)
                return Ok(res);
            else
                return NotFound();

        }
        [Route("get-disease-by-code")]
        [HttpGet]
        public async Task<IActionResult> GetDiseaseByIDCCode(string code)
        {
            var res = await dal.GetDiseaseByICDCode(code);

            if (res != null)
                return Ok(res);
            else
                return NotFound();
        }

        [Route("validate-user-credentials")]
        [HttpGet]

        public async Task<IActionResult> ValidatUserCredentials(string username, string password) 
        {
            string encryptedPassword = Helper.Helper.EncryptWithMD5(password);

            var res = await dal.GetAuthorization(username, encryptedPassword);

            if (res.Authorise == "Access Denied")
            {
                return NotFound();
            }
            else 
            {
                res.Passwordfld = encryptedPassword;
                return Ok(res);
            }
        }

        [Route("get-doctors")]
        [HttpGet]
        public async Task<IActionResult> GetDoctors() 
        {
            var res = await dal.GetDoctors();
            if(res != null)
                return Ok(res);
            else
                return NotFound();
          
        }

        [Route("get-transactions")]
        [HttpGet]
        public async Task<IActionResult> GetTransactions()
        {
            var res = await dal.GetTransaction();
            if (res != null)
                return Ok(res);
            else
                return NotFound();

        }


        [Route("get-users")]
        [HttpGet]
        public async Task<IActionResult> GetUsers()
        {
            var res = await dal.GetUsers();
            if (res != null)
                return Ok(res);
            else
                return NotFound();

        }
        [Route("get-dropdown-user-list")]
        [HttpGet]
        public async Task<IActionResult> GetDropdownUserList()
        {
            var res = await dal.GetDropdownUserList();
            if (res != null)
                return Ok(res);
            else
                return NotFound();

        }

        [Route("get-admin-users")]
        [HttpGet]
        public async Task<IActionResult> GetAdmin()
        {
            var res = await dal.GetAdmin();
            if (res != null)
                return Ok(res);
            else
                return NotFound();

        }

        [Route("get-user-profile")]
        [HttpGet]
        public async Task<IActionResult> GetProfile(Guid personGuid)
        {
            var res = await dal.GetProfileDetails(personGuid);
            if (res != null)
                return Ok(res);
            else
                return NotFound();

        }

        [Route("get-user-documents")]
        [HttpGet]
        public async Task<IActionResult> GetDocuments(Guid personGuid)
        {
            var res = await dal.GetUserDocuments(personGuid);
            if (res != null)
                return Ok(res);
            else
                return NotFound();

        }


        [Route("get-user-details")]
        [HttpGet]
        public async Task<IActionResult> GetuserDetails(Guid personGuid)
        {
            var res = await dal.GetUsersDetails(personGuid);
            if (res != null)
                return Ok(res);
            else
                return NotFound();
        }

        [Route("document-upload")]
        [HttpGet]
        public async Task<IActionResult> GetDocumentUpload(Guid personGuid)
        {
            var res = await dal.GetPersonType(personGuid);
            CDocumentRepository cDocumentRepository = new ();
            cDocumentRepository.SourceRecordGUIDfld = personGuid;
            cDocumentRepository.UserTypefld = res;
            
            if (res != "")
                return Ok(cDocumentRepository);
            else
                return NotFound();

        }

        [Route("document-view")]
        [HttpGet]
        public async Task<IActionResult> GetDocumentView(Guid personGuid)
        {
            CDocumentRepository cDocumentRepository = new();
            cDocumentRepository.SourceRecordGUIDfld = personGuid;
            cDocumentRepository.DocumentList = await dal.GetPublicDocuments(personGuid); 

            if (cDocumentRepository.DocumentList != null)
                return Ok(cDocumentRepository);
            else
                return NotFound();

        }

        #endregion
    }
}
